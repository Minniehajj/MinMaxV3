import type { GetStaticPaths, GetStaticPropsContext, NextPage } from "next";
import Head from "next/head";
import { ContentfulClient } from "../server/db/client";
import { trpc } from "../utils/trpc";
import { createSSGHelpers } from "@trpc/react/ssg";
import { contentfulBlogPostRouter } from "../server/router/contentful-blog-post";
import superjson from "superjson";

const Page: NextPage = () => {
  // const hello = trpc.useQuery(["example.hello", { text: "from tRPC" }]);
  const posts = trpc.useQuery(["blogpost.getAllSlugs"]);
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center h-screen p-4">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          Create <span className="text-purple-300">T3</span> App
        </h1>
        <p className="text-2xl text-gray-700">This stack uses:</p>
        <div className="grid gap-3 pt-3 mt-3 text-center md:grid-cols-2 lg:w-2/3"></div>
      </main>
    </>
  );
};

export const getStaticPaths: GetStaticPaths = async () => {
  const posts = await ContentfulClient.getEntries({
    content_type: "post",
  });
  return {
    paths: posts.items.map(
      (post: {
        fields: {
          id: string;
          slug: string;
        };
      }) => ({
        params: {
          slug: [post.fields.slug],
          id: [post.fields.id],
        },
      })
    ),
    // https://nextjs.org/docs/basic-features/data-fetching#fallback-blocking
    fallback: "blocking",
  };
};

export async function getStaticProps(context: GetStaticPropsContext) {
  const ssg = await createSSGHelpers({
    router: contentfulBlogPostRouter,
    ctx: {},
    transformer: superjson, // optional - adds superjson serialization
  });
  console.log(context);
  return {
    props: {},
    revalidate: 1,
  };
  // prefetch `post.byId`
  // await ssg.fetchQuery("getPost", {
  //   slug: context?.params?.slug,
  // });

  // return {
  //   props: {
  //     trpcState: ssg.dehydrate(),
  //     slug,
  //   },
  //   revalidate: 1,
  // };
}

export default Page;
